def print_chess_board(k, l, m, n):
    board = [[0 for i in range(0, 8)] for j in range(0, 8)]

    for i in range(0, 8):
        if i % 2 == 0:
            for j in range(0, 8):
                if j % 2 == 0:
                    board[i][j] = "\033[0;37;47m  "
                else:
                    board[i][j] = "\033[0;37;48m  "
        else:
            for j in range(0, 8):
                if j % 2 == 0:
                    board[i][j] = "\033[0;37;48m  "
                else:
                    board[i][j] = "\033[0;37;47m  "

    k, l, m, n = map(lambda x: x - 1, (k, l, m, n))

    if (k + l) % 2 != 0:
        board[7-l][k] = "\033[1;31;47m 1"
    else:
        board[7-l][k] = "\033[1;31;40m 1"

    if (m + n) % 2 != 0:
        board[7-n][m] = "\033[1;31;47m 2"
    else:
        board[7-n][m] = "\033[1;31;40m 2"

    for i in range(0, 8):
        for j in range(0, 8):
            print(board[i][j], end='')
        print('\033[0;37;40m')


def compare_colors(k, l, m, n):
    if (k+l) % 2 == (m+n) % 2:
        print('1: Поля одного цвета')
    else:
        print('1: Поля разных цветов')


def check_queen(k, l, m, n):
    print('2: На поле (к, I) расположен ферзь. Угрожает ли он полю (m, n)?')
    if (k == m) or (l == n) or abs(k - m) == abs(l - n):
        print("   ДА")
    else:
        print("   НЕТ")


def check_knight(k, l, m, n):
    print('3:  На поле (к, I) расположен конь. Угрожает ли он полю (m, n)?')
    if ((abs(abs(k - m) - 2) == 0) and (abs(abs(l - n) - 1) == 0) or (abs(abs(k - m) - 1) == 0) and (abs(abs(l - n) - 2) == 0)):
        print('   ДА')
    else:
        print("   НЕТ")


def check_rook_move(k, l, m, n):
    print("4: Можно ли с поля (k, I) одним ходом ладьи попасть на поле (m, n)?")
    if k == m or l == n:
        print("   ДА, возможно")
    else:
        print(f"    НЕТ, сначала вам нужно переместиться на ({k}, {n})")


def check_queen_move(k, l, m, n):
    print("5: Можно ли с поля (k, I) одним ходом ферзя попасть на поле (m, n)?")
    if (k == m) or (l == n) or abs(k - m) == abs(l - n):
        print("   ДА, возможно")
    elif (k + l) % 2 == (m + n) % 2:
        x = (k + l + m - n) // 2
        y = (k + l - m + n) // 2
        if x > 8 or x < 1 or y > 8 or y < 1:
            x = (m + n + k - l) // 2
            y = (m + n - k + l) // 2
        print(f'    НЕТ, сначала вам нужно переместиться на ({x}, {y})')
    else:
        print(f"    НЕТ, сначала вам нужно переместиться на ({k}, {n})")


def check_bishop_move(k, l, m, n):
    print("6:  Можно ли с поля (k, I) одним ходом слона попасть на поле (m, n)?")
    if (k + l) % 2 == (m + n) % 2:
        if abs(k - m) == abs(l - n):
            print("   ДА, возможно")
        else:
            x = (k + l + m - n) // 2
            y = (k + l - m + n) // 2
            if x > 8 or x < 1 or y > 8 or y < 1:
                x = (m + n + k - l) // 2
                y = (m + n - k + l) // 2
            print(f'   НЕТ, сначала вам нужно переместиться на ({x}, {y})')
    else:
        print("   НЕТ, поля разных цветов")


def main():
    numbers = [str(i) for i in range(1, 9)]
    print("Введите индексы для двух квадратов (k, l) и (m, n) !ИНДЕКСЫ ДОЛЖНЫ ПИНИМАТЬ ЗНАЧЕНИЯ ТОЛЬКО ЦЕЛЫХ ЧИСЕЛ ОТ 1 ДО 8!.")
    k = input("Введите значение k: ")
    l = input("Введите значение l: ")
    m = input("Введите значение m: ")
    n = input("Введите значение n: ")

    if k in numbers and l in numbers and m in numbers and n in numbers:
        if k == m and l == n:
            print("Координаты квадратов совпали! Попробуйте еще раз \n")
            main()
        else:
            k, l, m, n = map(int, (k, l, m, n))
            print()
            print_chess_board(k, l, m, n)
            print('\033[0;37;40m')
            compare_colors(k, l, m, n)
            check_queen(k, l, m, n)
            check_knight(k, l, m, n)
            check_rook_move(k, l, m, n)
            check_queen_move(k, l, m, n)
            check_bishop_move(k, l, m, n)

    else:
        print("Введенные значения не подходят уловию задачи! Попробуйте еще раз \n")
        main()

if __name__ == "__main__":
    main()
